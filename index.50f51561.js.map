{"mappings":"YAmC8C,IAAxCA,EAAYC,SAASC,eAAe,UAeL,IAA/BC,EAAmB,SAAAC,GAE2B,IAA5CC,EAAWD,EAAKE,MAAK,OAGrBC,EAAa,GAECF,EAAXG,SAAQ,SAAAC,GACf,IAAMC,EAAY,GACbC,GAAY,EAAZC,GAAY,EAAZC,OAAYC,E,IAAjB,QAAKC,EAAAC,EAAgBP,EAAIQ,OAAAC,cAApBP,GAAAI,EAAAC,EAAYG,QAAAC,MAAZT,GAAY,GAAZ,IAAMU,EAANN,EAAYO,MACfZ,EAAUW,IAAWX,EAAUW,IAAW,GAAK,C,WAD5CT,GAAY,EAAZC,EAAYU,C,aAAZZ,GAAY,MAAZK,EAAYQ,QAAZR,EAAYQ,Q,YAAZZ,E,MAAAC,C,EAIgC,IAA/BY,EAAOC,OAAOD,KAAKf,GACpBiB,GAAS,EAATC,GAAS,EAATC,OAASf,E,IAAd,QAAKgB,EAAAC,EAAaN,EAAIR,OAAAC,cAAjBS,GAAAG,EAAAC,EAASZ,QAAAC,MAATO,GAAS,GAAT,IAAMK,EAANF,EAASR,MACZ,GAAuB,IAAnBZ,EAAUsB,GAAY,CACxBzB,EAAW0B,KAAKD,GAChB,K,YAHCJ,GAAS,EAATC,EAASK,C,aAATP,GAAS,MAATI,EAASP,QAATO,EAASP,Q,YAATI,E,MAAAC,C,MAQ0C,IAA3CM,EAAe5B,EAAW6B,QAAO,SAACC,EAAMC,GAE5C,OADAD,EAAKC,IAASD,EAAKC,IAAS,GAAK,EAC1BD,C,GACN,IAE0B,OAAtB9B,EAAWgC,MAAK,SAAAD,G,OAA+B,IAAvBH,EAAaG,E,KAI9CrC,SAASC,eAAe,UAAUsC,iBAAiB,UA3CjB,SAAZC,GACpBA,EAAMC,iBAG0B,IAA1BtC,EAAOH,SAASC,eAAe,aAAaoB,MAGbqB,QAA7BC,IAAIzC,EAAiBC,IAC7BJ,EAAU6C,YAAc1C,EAAiBC,E","sources":["src/index.js"],"sourcesContent":["// ===============Задача===========================\n// Вам потрібно розробити алгоритм програми, яка повинна виконувати наступне:\n// - програма приймає на вхід довільний текст і знаходить в кожному слові цього тексту найперший символ, який більше НЕ повторюється в аналізуємому слові\n// - далі із отриманого набору символів програма повинна вибрати перший унікальний (тобто той, який більше не зустручається в наборі) і повернути його.\n\n// Наприклад, якщо програма отримує на вхід текст нижче:\n\n// The Tao gave birth to machine language.  Machine language gave birth\n// to the assembler.\n// The assembler gave birth to the compiler.  Now there are ten thousand\n// languages.\n// Each language has its purpose, however humble.  Each language\n// expresses the Yin and Yang of software.  Each language has its place within\n// the Tao.\n// But do not program in COBOL if you can avoid it.\n//         -- Geoffrey James, \"The Tao of Programming\"\n\n// то повинна повернути вона символ \"m\".\n//=====================================================\n\n// 1. Приймаємо вхідний текст як рядок.\n// 2. Розділимо текст на окремі слова та отримаємо масив цих слів.\n// 3.  Ініцюємо словник для зберігання унікальних символів тексту.\n// 4. Перебираємо масив слів і для кожного слова виконаємо наступні кроки:\n//    4.1 Ініціалізуємо порожній обʼєкт для зберігання символів і кількості їх зустрічей.\n//    4.2 Для кожного символу у слові:\n//        4.2.1 Якщо символ вже присутній у словнику, збільшуємо значення його лічильника на 1.\n//        4.2.2 Якщо символ ще не присутній у словнику, додаємо його як ключ із початковим значенням 1.\n//    3.3 Додаємо унікальні символи слів до словнику.\n// 4. Рахуємо унікальні символи у словнику за допомогою методу reduce();\n// 5. Далі із отриманого набору символів, за допомогою методу find, вибраємо перший унікальний (тобто той, який більше не\n// зустручається в наборі) і повертаємо його.\n// 6. Записуємо унікальний символ у текстове поле результату.\n\n//отримуємо посилання на текстовий елемент результату\nconst resultRef = document.getElementById('result');\n\n// Функція обробки події надсилання форми\nfunction handleSubmit(event) {\n  event.preventDefault(); // Зупиняємо стандартну поведінку форми\n\n  // Отримуємо значення введеного тексту\n  const text = document.getElementById('textInput').value;\n\n  // Виклик функції обробки з отриманим текстом\n  console.log(findUnicueSymbol(text));\n  resultRef.textContent = findUnicueSymbol(text);\n}\n\n// функція пошуку унікального символу тексту\nconst findUnicueSymbol = text => {\n  // Розділимо текст на окремі слова та отримаємо масив цих слів.\n  const wordsArr = text.split(/\\s+/);\n\n  // Ініцюємо словник для зберігання унікальних символів тексту\n  const dictionary = [];\n  // Перебираємо масив слів\n  wordsArr.forEach(word => {\n    const letterObj = {};\n    for (const letter of word) {\n      letterObj[letter] = (letterObj[letter] || 0) + 1;\n    }\n    // Додаємо унікальні символи слів до словнику.\n    const keys = Object.keys(letterObj);\n    for (const key of keys) {\n      if (letterObj[key] === 1) {\n        dictionary.push(key);\n        break;\n      }\n    }\n  });\n  // Рахуємо унікальні символи у словнику за допомогою методу reduce\n  const uniqueSymbol = dictionary.reduce((acum, item) => {\n    acum[item] = (acum[item] || 0) + 1;\n    return acum;\n  }, {});\n  // Шукаємо перший унікальний символ\n  return dictionary.find(item => uniqueSymbol[item] === 1);\n};\n\n// Прикріплюємо обробник події надсилання форми\ndocument.getElementById('myForm').addEventListener('submit', handleSubmit);\n"],"names":["$b8f9b7833fa37166$var$resultRef","document","getElementById","$b8f9b7833fa37166$var$findUnicueSymbol","text","wordsArr","split","dictionary","forEach","word","letterObj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","letter","value","err","return","keys","Object","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","key","push","err1","uniqueSymbol","reduce","acum","item","find","addEventListener","event","preventDefault","console","log","textContent"],"version":3,"file":"index.50f51561.js.map"}